#!/bin/sh
# -*- scheme -*-
exec ${GUILE:-@GUILE@} --no-auto-compile -e main -s "$0" "$@"
!#
;;; cuirass -- continuous integration tool
;;; Copyright © 2016 Mathieu Lirzin <mthl@gnu.org>
;;;
;;; This file is part of Cuirass.
;;;
;;; Cuirass is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; Cuirass is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Cuirass.  If not, see <http://www.gnu.org/licenses/>.

(use-modules (cuirass base)
             (cuirass database)
             (cuirass ui)
             (cuirass utils)
             (ice-9 getopt-long))

(define (show-help)
  (format #t "Usage: ~a [OPTIONS]~%" (%program-name))
  (display "Run build jobs from internal database.

      --one-shot            Evaluate and build jobs only once
      --cache-directory=DIR Use DIR for storing repository data
  -S  --specifications=SPECFILE
                            Add specifications from SPECFILE to database.
  -D  --database=DB         Use DB to store build results.
  -I, --interval=N          Wait N seconds between each poll
  -V, --version             Display version
  -h, --help                Display this help message")
  (newline)
  (show-package-information))

(define %options
  '((one-shot                         (value #f))
    (cache-directory                  (value #t))
    (specifications (single-char #\S) (value #t))
    (database       (single-char #\D) (value #t))
    (interval       (single-char #\I) (value #t))
    (version        (single-char #\V) (value #f))
    (help           (single-char #\h) (value #f))))


;;;
;;; Entry point.
;;;

(define* (main #:optional (args (command-line)))
  (let* ((opts (getopt-long args %options)))
    (parameterize
        ((%program-name     (car args))
         (%package-database (option-ref opts 'database (%package-database)))
         (%package-cachedir
          (option-ref opts 'cache-directory (%package-cachedir))))
      (cond
       ((option-ref opts 'help #f)
        (show-help)
        (exit 0))
       ((option-ref opts 'version #f)
        (show-version)
        (exit 0))
       (else
        (let ((one-shot? (option-ref opts 'one-shot #f))
              (interval  (string->number (option-ref opts 'interval "10")))
              (specfile  (option-ref opts 'specifications #f)))
          (with-database db
            (and specfile
                 (let ((new-specs (save-module-excursion
                                   (λ ()
                                     (set-current-module (make-user-module))
                                     (primitive-load specfile)))))
                   (for-each (λ (spec) (db-add-specification db spec))
                             new-specs)))
            (let ((specs (db-get-specifications db)))
              (if one-shot?
                  (process-specs db specs)
                  (while #t
                    (process-specs db specs)
                    (sleep interval)))))))))))
